<?php

namespace AppBundle\Repository;
use AppBundle\Entity\HostBan;
use AppBundle\Entity\User;
use Symfony\Bridge\Doctrine\Security\User\UserLoaderInterface;
use Symfony\Component\Security\Core\User\UserInterface;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository
    extends \Doctrine\ORM\EntityRepository
    implements  UserLoaderInterface
{

    /**
     * Loads the user for the given username.
     *
     * This method must return null if the user is not found.
     *
     * @param string $username The username
     *
     * @return UserInterface|null
     */
    public function loadUserByUsername($username)
    {
        $qb = $this->createQueryBuilder('u');
        $qb->where($qb->expr()->orX(
                $qb->expr()->eq('u.username', ':username'),
                $qb->expr()->eq('u.email', ':username')
            ))
            ->setMaxResults(1)
            ->setParameter(':username', $username);
        $user = $qb->getQuery()->getOneOrNullResult();
        return $user;
    }

    /**
     * Removes a user by his username
     * @param $username
     * @return bool
     */
    public function removeByUsername($username){
        $user = $this->findOneBy(array('username' => $username));

        if ($user != null){
            $em = $this->getEntityManager();
            $em->remove($user);
            $em->flush();
            return true;
        }
        return false;
    }

    public function isBanned($username)
    {
        /** @var User $user */
        $user = $this->loadUserByUsername($username);
        if($user==null){
            return false;
        }
        else if($user->getIsBanned()){
            return true;
        }
    }

    public function ban(User $user)
    {
        $user->setIsBanned(true);
        $em = $this->getEntityManager();
        $em->persist($user);
        $em->flush();
    }
    public function unban(User $user)
    {
        $user->setIsBanned(false);
        $em = $this->getEntityManager();
        $em->persist($user);
        $em->flush();
    }

}
