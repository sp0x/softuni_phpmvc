<?php

namespace AppBundle\Repository;
use AppBundle\Entity\Product;
use AppBundle\Entity\Promotion;
use Doctrine\DBAL\Types\Type;

/**
 * PromotionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PromotionRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param Product $product
     * @return mixed
     */
    public function getProductPromotion($product)
    {
        $qb = $this->createQueryBuilder('promo');
        $qb->where($qb->expr()->orX(
                $qb->expr()->eq('promo.productId', ':productId'),
                $qb->expr()->eq('promo.isGeneral', ':isGeneral'),
                $qb->expr()->eq('promo.categoryId', ':categoryId')
            ))
            ->andWhere('promo.start <= :timeNow')
            ->andWhere('promo.ends > :timeNow')
            ->setParameter(':productId', $product->getId())
            ->setParameter(':isGeneral', true)
            ->setParameter(':categoryId', $product->getCategory()->getId())
            ->setParameter(':timeNow', new \DateTime() , Type::DATETIME)
            ->setMaxResults(1)
            ->orderBy('promo.discount', 'DESC');
        $promotion = $qb->getQuery()->getOneOrNullResult();
        return $promotion;
    }

    /**
     * @return Promotion[]
     */
    public function getAvailablePromotions(){
        $qb = $this->createQueryBuilder('promo');
        $qb->where('promo.start <= :timeNow')
            ->andWhere('promo.ends > :timeNow')
            ->setParameter(':timeNow', new \DateTime() , Type::DATETIME);
        $promos = $qb->getQuery()->getResult();
        return $promos;
    }

    /**
     * @return Promotion[]
     */
    public function getSpecialPromotions()
    {
        $qb = $this->createQueryBuilder('promo');
        $qb->where('promo.start <= :timeNow')
            ->andWhere('promo.ends > :timeNow')
            ->andWhere('promo.criteria IS NOT NULL')
            ->setParameter(':timeNow', new \DateTime() , Type::DATETIME)
            ->orderBy('promo.discount', 'DESC');
        $promotions = $qb->getQuery()->getResult();
        return $promotions;
    }
}
